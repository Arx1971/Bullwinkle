/*
  Copyright 2014 Sylvain Hallé
  Laboratoire d'informatique formelle
  Université du Québec à Chicoutimi, Canada
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
package ca.uqac.lif.bullwinkle.output;

import java.util.Stack;

import ca.uqac.lif.bullwinkle.ParseNode;

public class XmlVisitor implements OutputFormatVisitor
{
  private Stack<String> m_parents;
  
  private StringBuilder m_output;
  
  private String m_topElementName = "parsetree";
  
  public XmlVisitor()
  {
    super();
    m_parents = new Stack<String>();
    m_output = new StringBuilder();
  }
  
  /**
   * Sets the element name used to surround the XML parse tree
   * @param name The element name
   */
  public void setTopElementName(final String name)
  {
    m_topElementName = name;
  }

  @Override
  public void visit(ParseNode node)
  {
    String label = node.getValue();
    if (label == null)
    {
      label = node.getToken();
      m_output.append(label);
    }
    else
    {
      m_output.append("<").append(label).append(">\n");
      m_parents.push(label);
    }
  }

  @Override
  public void pop()
  {
    String element_name = m_parents.pop();
    m_output.append("</").append(element_name).append(">\n");
  }

  @Override
  public String toOutputString()
  {
    StringBuilder out = new StringBuilder();
    out.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
    out.append("<!-- File auto-generated by Bullwinkle --> \n\n");
    out.append("<").append(m_topElementName).append(">\n").append(m_output).append("</").append(m_topElementName).append(">");
    return out.toString();
  }

}
